{"version":3,"sources":["App.js","Display.js","Button.js","Buttons.js","reportWebVitals.js","index.js"],"names":["App","useState","display","setDisplay","numbers","operators","handleButtonClick","event","id","target","value","type","includes","prevState","input","toString","charAt","length","numberArray","split","calculation","regex","test","match","forEach","item","replace","output","eval","toFixed","err","alert","message","className","Display","props","Button","onClick","Buttons","numberButtons","map","number","index","operatorButtons","operator","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.846fe968.chunk.js","sourcesContent":["import './App.css';\nimport Buttons from './Buttons'\nimport Display from './Display'\nimport { useState } from 'react'\n\nfunction App() {\n  const [display, setDisplay] = useState(0)\n\n  const numbers = [\"nine\", \"eight\", \"seven\", \"six\", \"five\", \"four\", \"three\", \"two\", \"one\", \"zero\"]\n  const operators = [\"add\", \"subtract\", \"multiply\", \"divide\", \"decimal\", \"clear\", \"equals\"]\n\n  const handleButtonClick = (event) => {\n    const id = event.target.id\n    const value = event.target.value\n    // Decide how to handle the button that was clicked\n    let type = \"\"\n    if (id === \"clear\") {\n      type = \"clear\"\n    } else if (id === \"equals\") {\n      type = \"equals\"\n    }\n    else if (numbers.includes(id) || operators.includes(id) || id === \"decimal\") {\n      type = \"input\"\n    }\n    switch (type) {\n      case \"input\":\n        setDisplay(prevState => {\n          if (prevState === 0) {\n            if (value === \"0\") {\n              return 0\n            } else {\n              return value\n            }\n          } else {\n            const input = prevState.toString()\n            if (input.charAt(input.length - 1) === \".\" && value === \".\") {\n              return prevState\n            } else {\n              const numberArray = input.split(/[*/+-]/)\n              if (numberArray[numberArray.length - 1].includes(\".\") && value === \".\") {\n                return prevState\n              }\n            }\n            return prevState + value\n          }\n        })\n        break;\n      case \"clear\":\n        setDisplay(0)\n        break;\n      case \"equals\":\n        // Work with what user had typed in on display\n        let calculation = display\n        // Check if there are several operators after one another\n        const regex = /[*/+-]+[*/+]/g\n        // If several operators, replace set with the last one\n        if (regex.test(calculation)) {\n          const match = calculation.match(regex)\n          match.forEach(item => {\n            calculation = calculation.replace(item, item.charAt(item.length - 1))\n          })\n        }\n        try {\n          const output = +eval(calculation).toFixed(4)\n          setDisplay(output)\n        }\n        catch (err) {\n          alert(err.message)\n        }\n    }\n  }\n\n\n\n  return (\n    <div className=\"App\">\n      <main className=\"Calculator\">\n        <Display display={display} />\n        <Buttons numbers={numbers} operators={operators} handleButtonClick={handleButtonClick} />\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","function Display(props) {\r\n\tconst display = props.display\r\n\treturn (\r\n\t\t<div id=\"display\">\r\n\t\t\t<p>{display}</p>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Display;\r\n","function Button(props) {\r\n\tconst type = props.type\r\n\treturn (\r\n\t\t<button onClick={props.handleButtonClick} value={props.value} className={`Button ${type}`} id={props.id}>{props.value}</button>\r\n\t);\r\n}\r\n\r\nexport default Button;\r\n","import Button from './Button'\r\n\r\nfunction Buttons(props) {\r\n\tconst numberButtons = props.numbers.map((number, index) => {\r\n\t\treturn < Button type=\"numberButton\" value={9 - index} id={number} key={9 - index} handleButtonClick={props.handleButtonClick} />\r\n\t})\r\n\r\n\tconst operatorButtons = props.operators.map((operator) => {\r\n\t\tlet value = \"+\"\r\n\t\tswitch (operator) {\r\n\t\t\tcase \"subtract\":\r\n\t\t\t\tvalue = \"-\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"multiply\":\r\n\t\t\t\tvalue = \"*\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"divide\":\r\n\t\t\t\tvalue = \"/\"\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"decimal\":\r\n\t\t\t\tvalue = \".\"\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"clear\":\r\n\t\t\t\tvalue = \"C\"\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"equals\":\r\n\t\t\t\tvalue = \"=\"\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t\treturn <Button type=\"operatorButton\" value={value} id={operator} key={operator} handleButtonClick={props.handleButtonClick} />\r\n\t})\r\n\r\n\treturn (\r\n\t\t<div id=\"Buttons\">\r\n\t\t\t{numberButtons}\r\n\t\t\t{operatorButtons}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Buttons;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}